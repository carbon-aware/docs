{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CarbonAware Docs","text":""},{"location":"#what-is-carbonaware","title":"What is CarbonAware?","text":"<p>CarbonAware is a suite of open-source tools and libraries designed to help developers build applications that can reduce their carbon footprint by making intelligent decisions based on real-time and forecasted carbon intensity data.</p> <p>By integrating carbon awareness into your applications, you can:</p> <ul> <li>Schedule workloads during times of cleaner energy</li> <li>Choose regions with lower carbon intensity for your deployments</li> <li>Optimize resource usage based on environmental impact</li> <li>Track and report on carbon savings for sustainability initiatives</li> </ul>"},{"location":"#core-components","title":"Core Components","text":""},{"location":"#scheduler","title":"Scheduler","text":"<p>The CarbonAware Scheduler is a service that helps you find the optimal time and location to run your computing workloads to minimize carbon emissions. It provides an API that allows you to query for optimal scheduling times based on forecasted carbon intensity data across different cloud regions.</p>"},{"location":"#key-capabilities","title":"Key Capabilities","text":"<ul> <li>Determine the best time to run workloads within specified time windows</li> <li>Compare carbon intensity across multiple cloud providers (AWS, Azure, GCP)</li> <li>Calculate potential carbon savings compared to worst-case scheduling</li> <li>Support for both batch jobs and interactive workloads</li> </ul>"},{"location":"#available-client-libraries","title":"Available Client Libraries","text":"<ul> <li>Python SDK - A full-featured Python client with both synchronous and asynchronous APIs</li> </ul>"},{"location":"#integrations","title":"Integrations","text":"<ul> <li>Prefect - An easy-to-use integration for adding carbon-aware delays to your Prefect flows and tasks</li> <li>Airflow - An easy-to-use integration for adding carbon-aware delays to your Airflow DAGs</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The easiest way to get started with CarbonAware is to use one of our client libraries or integrations. Check out the Scheduler Python SDK for examples and API reference, or the Prefect Integration for examples and API reference.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>CarbonAware is an open-source project, and we welcome contributions from the community. Whether you're interested in adding new features, fixing bugs, or improving documentation, your help is appreciated.</p>"},{"location":"integrations/","title":"CarbonAware Integrations","text":""},{"location":"integrations/#prefect","title":"Prefect","text":"<p>The CarbonAware Prefect integration provides an easy-to-use integration for adding carbon-aware delays to your Prefect flows and tasks.</p>"},{"location":"integrations/#airflow","title":"Airflow","text":"<p>The CarbonAware Airflow integration provides an easy-to-use integration for adding carbon-aware delays to your Airflow DAGs.</p>"},{"location":"integrations/airflow/","title":"Airflow Integration with CarbonAware","text":""},{"location":"integrations/airflow/#what-is-airflow","title":"What is Airflow?","text":"<p>Apache Airflow is a workflow orchestration platform for authoring, scheduling, and monitoring data pipelines. It uses DAGs (Directed Acyclic Graphs) defined in Python to express task dependencies and scheduling logic.</p>"},{"location":"integrations/airflow/#why-carbonaware-in-airflow","title":"Why CarbonAware in Airflow?","text":"<p>CarbonAware helps you minimize the carbon footprint of your data pipelines by scheduling computational tasks when grid carbon intensity is at its lowest. Integrating CarbonAware with Airflow empowers engineers to automatically defer workloads to the most environmentally friendly execution windows without manual intervention.</p>"},{"location":"integrations/airflow/#installation","title":"Installation","text":"<p>Install the provider package via pip:</p> <pre><code>pip install airflow-provider-carbonaware\n</code></pre>"},{"location":"integrations/airflow/#usage","title":"Usage","text":""},{"location":"integrations/airflow/#basic-usage","title":"Basic Usage","text":"<pre><code>from pendulum import datetime as pendulum_datetime\nfrom airflow.decorators import dag\nfrom airflow.operators.bash import BashOperator\nfrom airflow_provider_carbonaware.operators.carbonaware import CarbonAwareOperator\n\n@dag(\n    start_date=pendulum_datetime(2023, 1, 1),\n    schedule=None,\n    default_args={\"retries\": 1},\n    tags=[\"carbon-aware\"],\n)\ndef example_carbonaware_dag():\n    setup = BashOperator(\n        task_id=\"setup\",\n        bash_command=\"echo 'Start setup'\"\n    )\n\n    find_slot = CarbonAwareOperator(\n        task_id=\"find_carbon_slot\",\n        execution_window_minutes=120,\n        task_duration_minutes=30,\n        zone={\"provider\": \"aws\", \"region\": \"us-east-1\"}\n    )\n\n    process = BashOperator(\n        task_id=\"process\",\n        bash_command=\"echo 'Processing data'\"\n    )\n\n    setup &gt;&gt; find_slot &gt;&gt; process\n\nexample_carbonaware_dag_instance = example_carbonaware_dag()\n</code></pre>"},{"location":"integrations/airflow/#advanced-usage","title":"Advanced Usage","text":""},{"location":"integrations/airflow/#1-automatic-region-provider-detection","title":"1. Automatic Region &amp; Provider Detection","text":"<p>By default, if you omit the <code>zone</code> parameter, the operator will introspect cloud metadata (AWS IMDSv2, GCP, Azure) to determine your execution environment:</p> <pre><code>find_slot = CarbonAwareOperator(\n    task_id=\"find_carbon_slot\",\n    execution_window_minutes=180,\n    task_duration_minutes=45,\n    # No `zone` passed \u2014 autodetection kicks in\n)\n</code></pre> <p>If you are not running your workload on one of the above cloud providers, set zone to the provider and region that is closest to the location where your code is running. To add support for a new cloud provider or zone, submit a ticket.</p>"},{"location":"integrations/airflow/#2-tuning-execution_window_minutes","title":"2. Tuning <code>execution_window_minutes</code>","text":"<p>Selecting an appropriate window size helps balance delay vs. carbon savings:</p> <ul> <li>Shorter windows (e.g., 30 minutes): Limits your task delay to under a half hour while capturing moderate carbon improvements.</li> <li>Long windows (e.g., 12 hours): Maximizes carbon reduction but may postpone your workload by many hours.</li> </ul>"},{"location":"integrations/airflow/#under-the-hood","title":"Under the Hood","text":"<ol> <li>CarbonAwareScheduler client: The operator calls the Python SDK to fetch the optimal start time within your window based on carbon intensity forecasts. This utilizes WattTime to get carbon intensity forecasts.</li> <li>Deferrable operator: Leveraging Airflow\u2019s deferrable framework, the operator releases the worker slot while waiting and resumes at the scheduled time.</li> </ol>"},{"location":"integrations/airflow/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API reference for full parameter details.</li> <li>Try integrating with other orchestration tools (e.g., Prefect).</li> <li>Contribute to the provider on GitHub.</li> </ul>"},{"location":"integrations/airflow/api/","title":"CarbonAware Airflow API","text":""},{"location":"integrations/airflow/api/#carbonawareoperator","title":"CarbonAwareOperator","text":"<p>               Bases: <code>BaseOperator</code></p> <p>Defers execution of downstream tasks to an optimal time based on carbon intensity.</p> <p>This operator uses the CarbonAware Scheduler API to find the optimal time to run tasks within a specified time window, based on carbon intensity in the specified cloud region(s).</p> <p>When added to a DAG, this operator will defer execution of all downstream tasks until the optimal time for carbon intensity. This allows for carbon-aware scheduling of your workflows without modifying the tasks themselves.</p> <p>Parameters:</p> Name Type Description Default <code>execution_window_minutes</code> <code>int</code> <p>The time window (in minutes) during which  the tasks can be executed. Defaults to 60.</p> <code>60</code> <code>task_duration_minutes</code> <code>int</code> <p>The expected duration of the downstream  tasks in minutes. Defaults to 30.</p> <code>30</code> <code>zone</code> <code>Optional[Dict[str, str]]</code> <p>Cloud provider zone to find carbon intensity for.  Format: {\"provider\": \"aws\", \"region\": \"us-east-1\"}. If None, will attempt to  introspect from instance metadata. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments passed to the BaseOperator constructor.</p> <code>{}</code> Example <pre><code>with DAG(...) as dag:\n    # This operator will determine the optimal time to run\n    carbon_aware = CarbonAwareOperator(\n        task_id=\"wait_for_optimal_carbon\",\n        execution_window_minutes=120,  # Look for optimal time in the next 2 hours\n        task_duration_minutes=30,      # Expected duration of downstream tasks\n        zone={\"provider\": \"aws\", \"region\": \"us-east-1\"},\n    )\n\n    # These tasks will run at the optimal time\n    task1 = PythonOperator(...)\n    task2 = BashOperator(...)\n\n    # Define dependencies\n    carbon_aware &gt;&gt; [task1, task2]\n</code></pre> Source code in <code>.venv/lib/python3.13/site-packages/airflow_provider_carbonaware/operators/carbonaware.py</code> <pre><code>def __init__(\n    self,\n    *,\n    execution_window_minutes: int = 60,\n    task_duration_minutes: int = 30,\n    zone: Optional[Dict[str, str]] = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(**kwargs)\n    self.execution_window_minutes = execution_window_minutes\n    self.task_duration_minutes = task_duration_minutes\n    self.zone = zone\n</code></pre>"},{"location":"integrations/airflow/api/#airflow_provider_carbonaware.operators.carbonaware.CarbonAwareOperator.execute","title":"<code>execute(context)</code>","text":"<p>Determines the optimal time to execute based on carbon intensity and defers execution to that time.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>Context</code> <p>The execution context.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>None if executing immediately, otherwise defers execution.</p> Source code in <code>.venv/lib/python3.13/site-packages/airflow_provider_carbonaware/operators/carbonaware.py</code> <pre><code>def execute(self, context: Context) -&gt; Any:\n    \"\"\"\n    Determines the optimal time to execute based on carbon intensity and defers execution to that time.\n\n    Args:\n        context (Context): The execution context.\n\n    Returns:\n        Any: None if executing immediately, otherwise defers execution.\n    \"\"\"\n    # Find the optimal time and defer\n    self.log.info(\"Finding optimal execution time based on carbon intensity\")\n    optimal_time = self._find_optimal_time()\n\n    # If optimal time is now or in the past, execute immediately\n    now = datetime.now(timezone.utc)\n    if optimal_time &lt;= now:\n        self.log.info(\n            \"Optimal time is now or in the past, proceeding with execution\"\n        )\n        return None\n\n    # Otherwise, defer to the optimal time\n    self.log.info(f\"Deferring execution to optimal time: {optimal_time}\")\n    self.defer(\n        trigger=DateTimeTrigger(moment=optimal_time, end_from_trigger=True),\n        method_name=\"execute_complete\",\n    )\n</code></pre>"},{"location":"integrations/airflow/api/#airflow_provider_carbonaware.operators.carbonaware.CarbonAwareOperator.execute_complete","title":"<code>execute_complete(context, event=None)</code>","text":"<p>Callback for deferred execution. This is called when the trigger fires.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>Context</code> <p>The execution context.</p> required <code>event</code> <code>Optional[Dict[str, Any]]</code> <p>The event data from the trigger. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>None, allowing downstream tasks to proceed.</p> Source code in <code>.venv/lib/python3.13/site-packages/airflow_provider_carbonaware/operators/carbonaware.py</code> <pre><code>def execute_complete(\n    self, context: Context, event: Optional[Dict[str, Any]] = None\n) -&gt; Any:\n    \"\"\"\n    Callback for deferred execution. This is called when the trigger fires.\n\n    Args:\n        context (Context): The execution context.\n        event (Optional[Dict[str, Any]], optional): The event data from the trigger.\n            Defaults to None.\n\n    Returns:\n        Any: None, allowing downstream tasks to proceed.\n    \"\"\"\n    moment = event.get(\"moment\") if event else None\n    self.log.info(f\"Reached optimal carbon intensity time: {moment}\")\n    return None\n</code></pre>"},{"location":"integrations/prefect/","title":"Prefect Integration with CarbonAware","text":"<p>The <code>carbonaware_prefect</code> package provides two easy\u2011to\u2011use interfaces for adding carbon\u2011aware delays to your Prefect flows and tasks:</p> <ol> <li>Decorator: <code>@carbonaware_delay_decorator</code> </li> <li>Task factory: <code>carbonaware_delay_task(...)</code></li> </ol> <p>Use these to postpone execution of downstream work until a low\u2011carbon time window is available.</p>"},{"location":"integrations/prefect/#installation","title":"Installation","text":"<pre><code>pip install carbonaware-prefect\n</code></pre>"},{"location":"integrations/prefect/#1-carbonaware-decorator","title":"1. Carbon\u2011Aware Decorator","text":"<p>The <code>carbonaware_delay_decorator</code> can be used to apply a delay to any Prefect task, before it runs. If you\u2019re using Prefect\u2019s <code>@task</code> decorator, apply <code>@carbonaware_delay_decorator</code> after it:</p> <pre><code>from datetime import timedelta\nfrom prefect import flow, task\nfrom carbonaware_prefect import carbonaware_delay_decorator\n\n# This task will delay execution until a CO\u2082\u2011optimal window is available\n@task\n@carbonaware_delay_decorator(\n    provider=\"gcp\",             # Optional: \"aws\", \"azure\", or \"gcp\"\n    region=\"us-central1\",       # Optional: cloud region string\n    window=timedelta(minutes=5),# Maximum wait time for an optimal slot\n    duration=timedelta(minutes=30),\n)\ndef train_model():\n    print(\"\u2705 Training started at carbon\u2011optimal time!\")\n    # ... actual work here ...\n\n@flow\ndef training_pipeline():\n    print(\"\ud83d\ude80 Launching carbon\u2011aware training pipeline...\")\n    train_model()\n\nif __name__ == \"__main__\":\n    training_pipeline()\n</code></pre> <p>Note: the delay runs in the same process as the task. This means that the worker running the task will be idle (sleeping) while waiting for a low-carbon time window to become available. It is highly encouraged to use as small a worker as possible to avoid excess idle resources.</p>"},{"location":"integrations/prefect/#how-it-works","title":"How it works","text":"<ul> <li>Before <code>train_model()</code> runs, the decorator calls <code>carbonaware_delay(...)</code> under the hood.</li> <li>If a lower\u2011carbon slot is found within the <code>window</code>, execution is delayed until then.</li> <li>If the client can\u2019t detect your region/provider (and <code>provider</code> and <code>region</code> are not specified), it logs a warning and proceeds immediately.</li> </ul>"},{"location":"integrations/prefect/#2-carbonaware-task-factory","title":"2. Carbon\u2011Aware Task Factory","text":"<p>If you prefer an explicit Prefect task that enforces a delay, use <code>carbonaware_delay_task</code> to generate one:</p> <pre><code>from datetime import timedelta\nfrom prefect import flow, task\nfrom carbonaware_prefect import carbonaware_delay_task\n\n@task\ndef train_model():\n    print(\"\u2705 Training started at carbon\u2011optimal time!\")\n    # ... actual work here ...\n\n@flow\ndef training_pipeline():\n    print(\"\ud83d\ude80 Launching carbon\u2011aware training pipeline...\")\n\n    # Create a carbon\u2011aware delay task\n    delay = carbonaware_delay_task(\n        provider=\"gcp\",\n        region=\"us-central1\",\n        window=timedelta(minutes=5),\n        duration=timedelta(minutes=30),\n    )\n\n    # Run the delay task first\n    delay()\n\n    # Then run your main task\n    train_model()\n\nif __name__ == \"__main__\":\n    training_pipeline()\n</code></pre> <p>Key points</p> <ul> <li><code>carbonaware_delay_task</code> returns a Prefect <code>@task</code> function.</li> <li>Calling that task blocks until a low\u2011carbon slot is available (or proceeds if undetectable).</li> <li>Use any Prefect task arguments via <code>**task_kwargs</code> if you need retries, tags, etc.</li> </ul>"},{"location":"integrations/prefect/#configuration-options","title":"Configuration Options","text":"<p>Both interfaces accept the same parameters:</p> Parameter Type Default Description <code>window</code> <code>timedelta</code> <code>timedelta(hours=6)</code> Max look\u2011ahead for optimal window <code>duration</code> <code>timedelta</code> <code>timedelta(minutes=30)</code> Estimated run time of your work <code>provider</code> <code>str</code> or <code>None</code> <code>None</code> Cloud provider (<code>\"aws\"</code>, <code>\"azure\"</code>, <code>\"gcp\"</code>); auto\u2011detected if <code>None</code> <code>region</code> <code>str</code> or <code>None</code> <code>None</code> Cloud region; auto\u2011detected if <code>None</code>"},{"location":"integrations/prefect/#troubleshooting-tips","title":"Troubleshooting &amp; Tips","text":"<ul> <li>Local development: If you\u2019re not in a cloud environment (on Azure, AWS, or GCP), set <code>provider</code> and <code>region</code> explicitly to avoid warnings.</li> <li>Logging: The decorator logs a warning if it can\u2019t detect your environment; check Prefect logs for details.</li> <li>Combining both: You can mix and match\u2014decorate a task with the decorator, or add a separate delay task in your flow.</li> </ul>"},{"location":"integrations/prefect/#next-steps","title":"Next Steps","text":"<ul> <li>See the CarbonAware Prefect API reference for detailed function signatures.</li> <li>Try integrating with other orchestration tools (e.g., Airflow).</li> <li>Back to the CarbonAware Docs Home.</li> </ul>"},{"location":"integrations/prefect/api/","title":"CarbonAware Prefect API","text":""},{"location":"integrations/prefect/api/#carbonaware-delay-decorator","title":"CarbonAware Delay Decorator","text":"<p>Decorator to delay execution until a CO2-optimal time.</p> <p>If region and provider are not specified, and they can't be detected automatically, a warning will be logged and no delay will be applied.</p> <p>Parameters:</p> Name Type Description Default <code>window</code> <code>timedelta</code> <p>The maximum delay to wait for an optimal time.</p> <code>timedelta(hours=6)</code> <code>duration</code> <code>timedelta</code> <p>The duration of the job.</p> <code>timedelta(minutes=30)</code> <code>region</code> <code>str | None</code> <p>The region of the cloud zone. If not specified, it will be detected automatically.</p> <code>None</code> <code>provider</code> <code>str | None</code> <p>The provider of the cloud zone. If not specified, it will be detected automatically.</p> <code>None</code> <p>Returns:</p> Type Description <p>A decorator function that can be applied to any function to delay its execution.</p> Source code in <code>.venv/lib/python3.13/site-packages/carbonaware_prefect/decorator.py</code> <pre><code>def carbonaware_delay_decorator(\n    window: timedelta = timedelta(hours=6),\n    duration: timedelta = timedelta(minutes=30),\n    region: str | None = None,\n    provider: str | None = None,\n):\n    \"\"\"Decorator to delay execution until a CO2-optimal time.\n\n    If region and provider are not specified, and they can't be detected automatically,\n    a warning will be logged and no delay will be applied.\n\n    Args:\n        window: The maximum delay to wait for an optimal time.\n        duration: The duration of the job.\n        region: The region of the cloud zone. If not specified, it will be detected automatically.\n        provider: The provider of the cloud zone. If not specified, it will be detected automatically.\n\n    Returns:\n        A decorator function that can be applied to any function to delay its execution.\n    \"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Apply the carbon-aware delay\n            carbonaware_delay(\n                window=window,\n                duration=duration,\n                region=region,\n                provider=provider,\n            )\n\n            # Execute the wrapped function\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"integrations/prefect/api/#carbonaware-delay-task","title":"CarbonAware Delay Task","text":"<p>Creates a Prefect task that delays execution until a CO2-optimal time.</p> <p>If region and provider are not specified, and they can't be detected automatically, a warning will be logged and no delay will be applied.</p> <p>Parameters:</p> Name Type Description Default <code>window</code> <code>timedelta</code> <p>The maximum delay to wait for an optimal time.</p> <code>timedelta(hours=6)</code> <code>duration</code> <code>timedelta</code> <p>The duration of the job.</p> <code>timedelta(minutes=30)</code> <code>region</code> <code>str | None</code> <p>The region of the cloud zone. If not specified, it will be detected automatically.</p> <code>None</code> <code>provider</code> <code>str | None</code> <p>The provider of the cloud zone. If not specified, it will be detected automatically.</p> <code>None</code> <code>**task_kwargs</code> <p>Additional keyword arguments to pass to the Prefect task.</p> <code>{}</code> <p>Returns:</p> Type Description <p>A Prefect task that delays execution until a CO2-optimal time.</p> Source code in <code>.venv/lib/python3.13/site-packages/carbonaware_prefect/task.py</code> <pre><code>def carbonaware_delay_task(\n    window: timedelta = timedelta(hours=6),\n    duration: timedelta = timedelta(minutes=30),\n    region: str | None = None,\n    provider: str | None = None,\n    **task_kwargs,\n):\n    \"\"\"\n    Creates a Prefect task that delays execution until a CO2-optimal time.\n\n    If region and provider are not specified, and they can't be detected automatically,\n    a warning will be logged and no delay will be applied.\n\n    Args:\n        window: The maximum delay to wait for an optimal time.\n        duration: The duration of the job.\n        region: The region of the cloud zone. If not specified, it will be detected automatically.\n        provider: The provider of the cloud zone. If not specified, it will be detected automatically.\n        **task_kwargs: Additional keyword arguments to pass to the Prefect task.\n\n    Returns:\n        A Prefect task that delays execution until a CO2-optimal time.\n    \"\"\"\n\n    # Create a task that performs the carbon-aware delay\n    @task(**task_kwargs)\n    def _carbonaware_delay_task():\n        carbonaware_delay(\n            window=window,\n            duration=duration,\n            region=region,\n            provider=provider,\n        )\n\n    return _carbonaware_delay_task\n</code></pre>"},{"location":"scheduler/","title":"CarbonAware Scheduler","text":""},{"location":"scheduler/#overview","title":"Overview","text":"<p>The CarbonAware Scheduler is a service designed to help reduce the carbon footprint of computing workloads by scheduling them during times of lower carbon intensity. It provides an API that allows you to find optimal execution times for your workloads based on forecasted carbon intensity data across different cloud regions.</p>"},{"location":"scheduler/#key-features","title":"Key Features","text":"<ul> <li>Carbon-aware scheduling: Determine the best time to run workloads to minimize carbon emissions</li> <li>Multi-region support: Compare carbon intensity across AWS, Azure, and GCP regions</li> <li>Flexible time windows: Define multiple time windows for potential execution</li> <li>Comparative metrics: View carbon savings compared to worst-case, median, and naive scheduling</li> <li>Simple REST API: Easy to integrate with existing systems and workflows</li> </ul>"},{"location":"scheduler/#how-it-works","title":"How It Works","text":"<ol> <li>You define a job with a specific duration (e.g., \"1 hour\")</li> <li>You specify one or more time windows when the job could run</li> <li>You select one or more cloud regions where the job could be executed</li> <li>The scheduler returns the optimal time and region to run your job to minimize carbon emissions</li> </ol>"},{"location":"scheduler/#benefits","title":"Benefits","text":"<ul> <li>Reduce carbon footprint: Lower the environmental impact of your computing workloads</li> <li>Cost optimization: Often, lower carbon intensity periods correlate with lower energy costs</li> <li>Sustainability reporting: Track potential carbon savings for sustainability initiatives</li> <li>Cloud flexibility: Compare emissions across different cloud providers and regions</li> </ul>"},{"location":"scheduler/#client-libraries","title":"Client Libraries","text":"<ul> <li>Python - A full-featured Python SDK with both synchronous and asynchronous clients</li> </ul>"},{"location":"scheduler/#getting-started","title":"Getting Started","text":"<p>The easiest way to get started is by using one of our client libraries. See the Python SDK documentation for examples and API reference.</p>"},{"location":"scheduler/python/","title":"Python SDK for CarbonAware Scheduler","text":"<p>The CarbonAware Python SDK provides a simple interface to query optimal scheduling times based on carbon intensity in different regions. It supports both synchronous and asynchronous clients.</p> <p>This guide covers:</p> <ul> <li>Installing the SDK  </li> <li>Creating a scheduler client  </li> <li>Listing available regions  </li> <li>Finding the optimal schedule for a job  </li> <li>Advanced usage examples  </li> </ul>"},{"location":"scheduler/python/#installation","title":"Installation","text":"<pre><code>pip install carbonaware-scheduler-client\n</code></pre>"},{"location":"scheduler/python/#getting-started","title":"Getting Started","text":""},{"location":"scheduler/python/#1-create-a-scheduler-client-sync","title":"1. Create a Scheduler Client (Sync)","text":"<pre><code>from carbonaware_scheduler import CarbonawareScheduler\n\n# synchronous client\nclient = CarbonawareScheduler()\n</code></pre> <p>By default, <code>client</code> points to <code>https://scheduler.carbonaware.dev</code>. If you're self-hosting the scheduler, you can override the base URL with the <code>CARBONAWARE_SCHEDULER_BASE_URL</code> environment variable or with <code>base_url=\"https://your-url\"</code> when initializing the client.</p>"},{"location":"scheduler/python/#2-list-available-regions","title":"2. List Available Regions","text":"<pre><code># GET /v0/regions/\nregions_response = client.regions.list()\nfor zone in regions_response.regions:\n    print(f\"{zone.provider}:{zone.region}\")\n</code></pre> <p>Sample output:</p> <pre><code>aws:us-east-1\nazure:eastus\n...\ngcp:us-central1\n</code></pre>"},{"location":"scheduler/python/#3-find-the-optimal-schedule-for-a-job","title":"3. Find the Optimal Schedule for a Job","text":"<pre><code>from datetime import datetime, timedelta\nfrom carbonaware_scheduler import CarbonawareScheduler\n\n# create client\nclient = CarbonawareScheduler()\n\n# prepare a single time window\nnow = datetime.utcnow()\nwindow = {\n    \"start\": now,\n    \"end\":   (now + timedelta(hours=6))\n}\n\n# POST /v0/schedule/\nschedule_response = client.schedule.create(\n    duration=\"PT1H\",\n    windows=[window],\n    zones=[{\"provider\": \"aws\", \"region\": \"us-east-1\"}]\n)\n\n# ideal option\nideal = schedule_response.ideal\nprint(f\"Ideal: {ideal.time} in {ideal.zone.provider}:{ideal.zone.region}\")\n</code></pre>"},{"location":"scheduler/python/#advanced-usage","title":"Advanced Usage","text":""},{"location":"scheduler/python/#a-compare-across-multiple-regions","title":"A. Compare Across Multiple Regions","text":"<pre><code>schedule_response = client.schedule.create(\n    duration=\"PT1H\",\n    windows=[window],\n    zones=[\n        {\"provider\": \"aws\",   \"region\": \"us-east-1\"},\n        {\"provider\": \"azure\", \"region\": \"westeurope\"},\n        {\"provider\": \"gcp\",   \"region\": \"us-central1\"},\n    ]\n)\nprint(f\"Best: {schedule_response.ideal.time} in {schedule_response.ideal.zone.region}\")\n</code></pre>"},{"location":"scheduler/python/#b-multiple-noncontiguous-time-windows","title":"B. Multiple Non\u2011contiguous Time Windows","text":"<pre><code>from carbonaware_scheduler import CarbonawareScheduler\n\nclient = CarbonawareScheduler()\n\nnow = datetime.utcnow()\nwindows = [\n    {\n        \"start\": now,\n        \"end\": (now + timedelta(hours=1))\n    },\n    {\n        \"start\": (now + timedelta(hours=3)),\n        \"end\": (now + timedelta(hours=5))\n    }\n]\n\nschedule_response = client.schedule.create(\n    duration=\"PT45M\",\n    windows=windows,\n    zones=[{\"provider\": \"aws\", \"region\": \"us-west-2\"}]\n)\n\nprint(f\"Ideal across windows: {schedule_response.ideal.time}\")\n</code></pre>"},{"location":"scheduler/python/#c-inspect-multiple-scheduling-options","title":"C. Inspect Multiple Scheduling Options","text":"<pre><code># request top 3 options\nschedule_response = client.schedule.create(\n    duration=\"PT30M\",\n    windows=[window],\n    zones=[{\"provider\": \"aws\", \"region\": \"us-east-1\"}],\n    num_options=3\n)\n\nfor opt in schedule_response.options:\n    print(f\"{opt.time} \u2014 zone={opt.zone.region} \u2014 co2={opt.co2_intensity} gCO\u2082/kWh\")\n</code></pre> <p>This returns:</p> <ul> <li><code>.ideal</code> \u2014 the best single slot</li> <li><code>.options</code> \u2014 a list of the next-best slots</li> <li><code>.naive_case</code>, <code>.worst_case</code>, <code>.median_case</code>, and <code>.carbon_savings</code> for comparative context</li> </ul>"},{"location":"scheduler/python/#async-client-optional","title":"Async Client (Optional)","text":"<p>If you prefer async I/O, swap in <code>AsyncCarbonawareScheduler</code>:</p> <pre><code>from carbonaware_scheduler import AsyncCarbonawareScheduler\n\nasync def main():\n    client = AsyncCarbonawareScheduler()\n    regions = (await client.regions.list()).regions\n    print(regions)\n\n# run with: asyncio.run(main())\n</code></pre> <p>The async client methods mirror the sync ones exactly.</p>"},{"location":"scheduler/python/#next-steps","title":"Next Steps","text":"<ul> <li>Return to the Scheduler Overview.</li> <li>Back to the CarbonAware Docs Home.</li> </ul>"}]}