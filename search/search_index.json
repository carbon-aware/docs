{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CarbonAware Docs","text":""},{"location":"#what-is-carbonaware","title":"What is CarbonAware?","text":"<p>CarbonAware is a suite of open-source tools and libraries designed to help developers build applications that can reduce their carbon footprint by making intelligent decisions based on real-time and forecasted carbon intensity data.</p> <p>By integrating carbon awareness into your applications, you can:</p> <ul> <li>Schedule workloads during times of cleaner energy</li> <li>Choose regions with lower carbon intensity for your deployments</li> <li>Optimize resource usage based on environmental impact</li> <li>Track and report on carbon savings for sustainability initiatives</li> </ul>"},{"location":"#core-components","title":"Core Components","text":""},{"location":"#scheduler","title":"Scheduler","text":"<p>The CarbonAware Scheduler is a service that helps you find the optimal time and location to run your computing workloads to minimize carbon emissions. It provides an API that allows you to query for optimal scheduling times based on forecasted carbon intensity data across different cloud regions.</p>"},{"location":"#key-capabilities","title":"Key Capabilities","text":"<ul> <li>Determine the best time to run workloads within specified time windows</li> <li>Compare carbon intensity across multiple cloud providers (AWS, Azure, GCP)</li> <li>Calculate potential carbon savings compared to worst-case scheduling</li> <li>Support for both batch jobs and interactive workloads</li> </ul>"},{"location":"#available-client-libraries","title":"Available Client Libraries","text":"<ul> <li>Python SDK - A full-featured Python client with both synchronous and asynchronous APIs</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The easiest way to get started with CarbonAware is to use one of our client libraries. Check out the Scheduler Python SDK for examples and API reference.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>CarbonAware is an open-source project, and we welcome contributions from the community. Whether you're interested in adding new features, fixing bugs, or improving documentation, your help is appreciated.</p>"},{"location":"scheduler/","title":"CarbonAware Scheduler","text":""},{"location":"scheduler/#overview","title":"Overview","text":"<p>The CarbonAware Scheduler is a service designed to help reduce the carbon footprint of computing workloads by scheduling them during times of lower carbon intensity. It provides an API that allows you to find optimal execution times for your workloads based on forecasted carbon intensity data across different cloud regions.</p>"},{"location":"scheduler/#key-features","title":"Key Features","text":"<ul> <li>Carbon-aware scheduling: Determine the best time to run workloads to minimize carbon emissions</li> <li>Multi-region support: Compare carbon intensity across AWS, Azure, and GCP regions</li> <li>Flexible time windows: Define multiple time windows for potential execution</li> <li>Comparative metrics: View carbon savings compared to worst-case, median, and naive scheduling</li> <li>Simple REST API: Easy to integrate with existing systems and workflows</li> </ul>"},{"location":"scheduler/#how-it-works","title":"How It Works","text":"<ol> <li>You define a job with a specific duration (e.g., \"1 hour\")</li> <li>You specify one or more time windows when the job could run</li> <li>You select one or more cloud regions where the job could be executed</li> <li>The scheduler returns the optimal time and region to run your job to minimize carbon emissions</li> </ol>"},{"location":"scheduler/#benefits","title":"Benefits","text":"<ul> <li>Reduce carbon footprint: Lower the environmental impact of your computing workloads</li> <li>Cost optimization: Often, lower carbon intensity periods correlate with lower energy costs</li> <li>Sustainability reporting: Track potential carbon savings for sustainability initiatives</li> <li>Cloud flexibility: Compare emissions across different cloud providers and regions</li> </ul>"},{"location":"scheduler/#client-libraries","title":"Client Libraries","text":"<ul> <li>Python - A full-featured Python SDK with both synchronous and asynchronous clients</li> </ul>"},{"location":"scheduler/#getting-started","title":"Getting Started","text":"<p>The easiest way to get started is by using one of our client libraries. See the Python SDK documentation for examples and API reference.</p>"},{"location":"scheduler/python/","title":"Python SDK for CarbonAware Scheduler","text":"<p>The CarbonAware Python SDK provides a simple interface to query optimal scheduling times based on carbon intensity in different regions. It supports both synchronous and asynchronous clients.</p> <p>This guide covers:</p> <ul> <li>Installing the SDK  </li> <li>Creating a scheduler client  </li> <li>Listing available regions  </li> <li>Finding the optimal schedule for a job  </li> <li>Advanced usage examples  </li> </ul>"},{"location":"scheduler/python/#installation","title":"Installation","text":"<pre><code>pip install carbonaware-scheduler-client\n</code></pre>"},{"location":"scheduler/python/#getting-started","title":"Getting Started","text":""},{"location":"scheduler/python/#1-create-a-scheduler-client-sync","title":"1. Create a Scheduler Client (Sync)","text":"<pre><code>from carbonaware_scheduler import CarbonawareScheduler\n\n# synchronous client\nclient = CarbonawareScheduler()\n</code></pre> <p>By default, <code>client</code> points to <code>https://scheduler.carbonaware.dev</code>. If you're self-hosting the scheduler, you can override the base URL with the <code>CARBONAWARE_SCHEDULER_BASE_URL</code> environment variable or with <code>base_url=\"https://your-url\"</code> when initializing the client.</p>"},{"location":"scheduler/python/#2-list-available-regions","title":"2. List Available Regions","text":"<pre><code># GET /v0/regions/\nregions_response = client.regions.list()\nfor zone in regions_response.regions:\n    print(f\"{zone.provider}:{zone.region}\")\n</code></pre> <p>Sample output:</p> <pre><code>aws:us-east-1\nazure:eastus\n...\ngcp:us-central1\n</code></pre>"},{"location":"scheduler/python/#3-find-the-optimal-schedule-for-a-job","title":"3. Find the Optimal Schedule for a Job","text":"<pre><code>from datetime import datetime, timedelta\nfrom carbonaware_scheduler import CarbonawareScheduler\n\n# create client\nclient = CarbonawareScheduler()\n\n# prepare a single time window\nnow = datetime.utcnow()\nwindow = {\n    \"start\": now,\n    \"end\":   (now + timedelta(hours=6))\n}\n\n# POST /v0/schedule/\nschedule_response = client.schedule.create(\n    duration=\"PT1H\",\n    windows=[window],\n    zones=[{\"provider\": \"aws\", \"region\": \"us-east-1\"}]\n)\n\n# ideal option\nideal = schedule_response.ideal\nprint(f\"Ideal: {ideal.time} in {ideal.zone.provider}:{ideal.zone.region}\")\n</code></pre>"},{"location":"scheduler/python/#advanced-usage","title":"Advanced Usage","text":""},{"location":"scheduler/python/#a-compare-across-multiple-regions","title":"A. Compare Across Multiple Regions","text":"<pre><code>schedule_response = client.schedule.create(\n    duration=\"PT1H\",\n    windows=[window],\n    zones=[\n        {\"provider\": \"aws\",   \"region\": \"us-east-1\"},\n        {\"provider\": \"azure\", \"region\": \"westeurope\"},\n        {\"provider\": \"gcp\",   \"region\": \"us-central1\"},\n    ]\n)\nprint(f\"Best: {schedule_response.ideal.time} in {schedule_response.ideal.zone.region}\")\n</code></pre>"},{"location":"scheduler/python/#b-multiple-noncontiguous-time-windows","title":"B. Multiple Non\u2011contiguous Time Windows","text":"<pre><code>from carbonaware_scheduler import CarbonawareScheduler\n\nclient = CarbonawareScheduler()\n\nnow = datetime.utcnow()\nwindows = [\n    {\n        \"start\": now,\n        \"end\": (now + timedelta(hours=1))\n    },\n    {\n        \"start\": (now + timedelta(hours=3)),\n        \"end\": (now + timedelta(hours=5))\n    }\n]\n\nschedule_response = client.schedule.create(\n    duration=\"PT45M\",\n    windows=windows,\n    zones=[{\"provider\": \"aws\", \"region\": \"us-west-2\"}]\n)\n\nprint(f\"Ideal across windows: {schedule_response.ideal.time}\")\n</code></pre>"},{"location":"scheduler/python/#c-inspect-multiple-scheduling-options","title":"C. Inspect Multiple Scheduling Options","text":"<pre><code># request top 3 options\nschedule_response = client.schedule.create(\n    duration=\"PT30M\",\n    windows=[window],\n    zones=[{\"provider\": \"aws\", \"region\": \"us-east-1\"}],\n    num_options=3\n)\n\nfor opt in schedule_response.options:\n    print(f\"{opt.time} \u2014 zone={opt.zone.region} \u2014 co2={opt.co2_intensity} gCO\u2082/kWh\")\n</code></pre> <p>This returns:</p> <ul> <li><code>.ideal</code> \u2014 the best single slot</li> <li><code>.options</code> \u2014 a list of the next-best slots</li> <li><code>.naive_case</code>, <code>.worst_case</code>, <code>.median_case</code>, and <code>.carbon_savings</code> for comparative context</li> </ul>"},{"location":"scheduler/python/#async-client-optional","title":"Async Client (Optional)","text":"<p>If you prefer async I/O, swap in <code>AsyncCarbonawareScheduler</code>:</p> <pre><code>from carbonaware_scheduler import AsyncCarbonawareScheduler\n\nasync def main():\n    client = AsyncCarbonawareScheduler()\n    regions = (await client.regions.list()).regions\n    print(regions)\n\n# run with: asyncio.run(main())\n</code></pre> <p>The async client methods mirror the sync ones exactly.</p>"},{"location":"scheduler/python/#next-steps","title":"Next Steps","text":"<ul> <li>See the full schema definitions for request and response types.</li> <li>Return to the Scheduler Overview.</li> <li>Back to the CarbonAware Docs Home.</li> </ul>"},{"location":"scheduler/python/api/","title":"Python API","text":""},{"location":"scheduler/python/api/#schedule","title":"Schedule","text":""},{"location":"scheduler/python/api/#schedule-parameters","title":"Schedule Parameters","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"scheduler/python/api/#schedule-response","title":"Schedule Response","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"scheduler/python/api/#regions","title":"Regions","text":""},{"location":"scheduler/python/api/#regions-list-response","title":"Regions List Response","text":"<p>               Bases: <code>BaseModel</code></p>"}]}