{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CarbonAware Docs","text":"<p>This is the central documentation site for all CarbonAware tools and libraries.</p>"},{"location":"#scheduler","title":"Scheduler","text":"<p>This section covers the CarbonAware Scheduler service and its client libraries.</p> <p>Python: python</p>"},{"location":"scheduler/","title":"Scheduler","text":"<p>This section covers the CarbonAware Scheduler service and its client libraries.o</p> <p>Python: python</p>"},{"location":"scheduler/python/","title":"Python SDK for CarbonAware Scheduler","text":"<p>The CarbonAware Python SDK provides a simple interface to query optimal scheduling times based on carbon intensity in different regions. It supports both synchronous and asynchronous clients.</p> <p>This guide covers:</p> <ul> <li>Installing the SDK  </li> <li>Creating a scheduler client  </li> <li>Listing available regions  </li> <li>Finding the optimal schedule for a job  </li> <li>Advanced usage examples  </li> </ul>"},{"location":"scheduler/python/#installation","title":"Installation","text":"<pre><code>pip install carbonaware-scheduler\n</code></pre>"},{"location":"scheduler/python/#getting-started","title":"Getting Started","text":""},{"location":"scheduler/python/#1-create-a-scheduler-client-sync","title":"1. Create a Scheduler Client (Sync)","text":"<pre><code>from carbonaware_scheduler import CarbonawareScheduler\n\n# synchronous client\nclient = CarbonawareScheduler()\n</code></pre> <p>By default, <code>client</code> points to <code>https://scheduler.carbonaware.dev</code>. If you're self-hosting the scheduler, you can override the base URL with the <code>CARBONAWARE_SCHEDULER_BASE_URL</code> environment variable or with <code>base_url=\"https://your-url\"</code> when initializing the client.</p>"},{"location":"scheduler/python/#2-list-available-regions","title":"2. List Available Regions","text":"<pre><code># GET /v0/regions/\nregions_response = client.regions.list()\nfor zone in regions_response.regions:\n    print(f\"{zone.provider}:{zone.region}\")\n</code></pre> <p>Sample output:</p> <pre><code>aws:us-east-1\nazure:eastus\n...\ngcp:us-central1\n</code></pre>"},{"location":"scheduler/python/#3-find-the-optimal-schedule-for-a-job","title":"3. Find the Optimal Schedule for a Job","text":"<pre><code>from datetime import datetime, timedelta\nfrom carbonaware_scheduler import CarbonawareScheduler\n\n# create client\nclient = CarbonawareScheduler()\n\n# prepare a single time window\nnow = datetime.utcnow()\nwindow = {\n    \"start\": now,\n    \"end\":   (now + timedelta(hours=6))\n}\n\n# POST /v0/schedule/\nschedule_response = client.schedule.create(\n    duration=\"PT1H\",\n    windows=[window],\n    zones=[{\"provider\": \"aws\", \"region\": \"us-east-1\"}]\n)\n\n# ideal option\nideal = schedule_response.ideal\nprint(f\"Ideal: {ideal.time} in {ideal.zone.provider}:{ideal.zone.region}\")\n</code></pre>"},{"location":"scheduler/python/#advanced-usage","title":"Advanced Usage","text":""},{"location":"scheduler/python/#a-compare-across-multiple-regions","title":"A. Compare Across Multiple Regions","text":"<pre><code>schedule_response = client.schedule.create(\n    duration=\"PT1H\",\n    windows=[window],\n    zones=[\n        {\"provider\": \"aws\",   \"region\": \"us-east-1\"},\n        {\"provider\": \"azure\", \"region\": \"westeurope\"},\n        {\"provider\": \"gcp\",   \"region\": \"us-central1\"},\n    ]\n)\nprint(f\"Best: {schedule_response.ideal.time} in {schedule_response.ideal.zone.region}\")\n</code></pre>"},{"location":"scheduler/python/#b-multiple-noncontiguous-time-windows","title":"B. Multiple Non\u2011contiguous Time Windows","text":"<pre><code>from carbonaware_scheduler import CarbonawareScheduler\n\nclient = CarbonawareScheduler()\n\nnow = datetime.utcnow()\nwindows = [\n    {\n        \"start\": now,\n        \"end\": (now + timedelta(hours=1))\n    },\n    {\n        \"start\": (now + timedelta(hours=3)),\n        \"end\": (now + timedelta(hours=5))\n    }\n]\n\nschedule_response = client.schedule.create(\n    duration=\"PT45M\",\n    windows=windows,\n    zones=[{\"provider\": \"aws\", \"region\": \"us-west-2\"}]\n)\n\nprint(f\"Ideal across windows: {schedule_response.ideal.time}\")\n</code></pre>"},{"location":"scheduler/python/#c-inspect-multiple-scheduling-options","title":"C. Inspect Multiple Scheduling Options","text":"<pre><code># request top 3 options\nschedule_response = client.schedule.create(\n    duration=\"PT30M\",\n    windows=[window],\n    zones=[{\"provider\": \"aws\", \"region\": \"us-east-1\"}],\n    num_options=3\n)\n\nfor opt in schedule_response.options:\n    print(f\"{opt.time} \u2014 zone={opt.zone.region} \u2014 co2={opt.co2_intensity} gCO\u2082/kWh\")\n</code></pre> <p>This returns:</p> <ul> <li><code>.ideal</code> \u2014 the best single slot</li> <li><code>.options</code> \u2014 a list of the next-best slots</li> <li><code>.naive_case</code>, <code>.worst_case</code>, <code>.median_case</code>, and <code>.carbon_savings</code> for comparative context</li> </ul>"},{"location":"scheduler/python/#async-client-optional","title":"Async Client (Optional)","text":"<p>If you prefer async I/O, swap in <code>AsyncCarbonawareScheduler</code>:</p> <pre><code>from carbonaware_scheduler import AsyncCarbonawareScheduler\n\nasync def main():\n    client = AsyncCarbonawareScheduler()\n    regions = (await client.regions.list()).regions\n    print(regions)\n\n# run with: asyncio.run(main())\n</code></pre> <p>The async client methods mirror the sync ones exactly.</p>"},{"location":"scheduler/python/#next-steps","title":"Next Steps","text":"<ul> <li>See the full schema definitions for request and response types.</li> <li>Return to the Scheduler Overview.</li> <li>Back to the CarbonAware Docs Home.</li> </ul>"},{"location":"scheduler/python/api/","title":"Python API","text":""},{"location":"scheduler/python/api/#schedule","title":"Schedule","text":""},{"location":"scheduler/python/api/#schedule-parameters","title":"Schedule Parameters","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"scheduler/python/api/#schedule-response","title":"Schedule Response","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"scheduler/python/api/#regions","title":"Regions","text":""},{"location":"scheduler/python/api/#regions-list-response","title":"Regions List Response","text":"<p>               Bases: <code>BaseModel</code></p>"}]}